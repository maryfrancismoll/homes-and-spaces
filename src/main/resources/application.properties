# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database
spring.datasource.url = jdbc:mysql://mysqldbinstance.cfcrl7cgzjvf.ap-southeast-2.rds.amazonaws.com:3306/spacesdb

# Username and password
spring.datasource.username = root
spring.datasource.password = 1234Adm!n

# Fixes error Table 'spacesdb.hibernate_sequence' doesn't exist
spring.jpa.hibernate.use-new-id-generator-mappings=false

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = none

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# Setting security.oauth2.resource.filter-order to 3 is required because
# the @EnableResourceServer annotation creates a WebSecurityConfigurerAdapter
# with a hard-coded Order (of 3) by default. The orders need to be aligned.
security.oauth2.resource.filter-order = 3

#logging properties
logging.file = homes-and-spaces.log

#news display properties
news.size = 3
news.page = 0

server.port = 9090